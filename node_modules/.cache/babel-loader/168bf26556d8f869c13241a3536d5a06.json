{"ast":null,"code":"var _jsxFileName = \"/Users/victorchen/Desktop/react-test/my-app/src/components/MapProductDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useRef, useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport tent from \"../imge/camping-tent.png\";\nimport styled from \"styled-components\";\nimport firebase from \"firebase\";\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledInfoRating = styled.h3`\n  color: gray;\n  font-family: sans-serif;\n  font-weight: bold;\n  text-align: center;\n`;\n_c = StyledInfoRating;\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"50vmin\",\n  width: \"100%\"\n};\nexport default function App() {\n  _s();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAAuyNVSxdv2VTjUe_N7hyH8drXIoypa_E\",\n    libraries\n  });\n  const [selected, setSelected] = useState(null);\n  const [places, setPlaces] = useState([]);\n  const {\n    itemID\n  } = useParams();\n  React.useEffect(() => {\n    firebase.firestore().collection(\"product\").where(\"__name__\", \"==\", itemID).onSnapshot(collectionSnapshot => {\n      const data = collectionSnapshot.docs.map(docSnapshot => {\n        const id = docSnapshot.id;\n        return { ...docSnapshot.data(),\n          id\n        };\n      });\n      setPlaces(data);\n      console.log(data);\n    });\n  }, []);\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\"; //   console.log(nearby);\n  //   console.log(selected);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      id: \"map\",\n      mapContainerStyle: mapContainerStyle,\n      zoom: 8,\n      center: {\n        lat: 23.96363430162278,\n        lng: 120.97561230851146\n      },\n      clickableIcons: false // onLoad={onMapLoad}\n      ,\n      children: [places.map(marker => /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.latitude.lat,\n          lng: marker.latitude.lng\n        },\n        onClick: () => {\n          setSelected(marker);\n        },\n        icon: {\n          url: tent,\n          origin: new window.google.maps.Point(0, 0),\n          anchor: new window.google.maps.Point(20, 20),\n          scaledSize: new window.google.maps.Size(40, 40)\n        }\n      }, marker.placeId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)), selected ? /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: {\n          lat: selected.latitude.lat,\n          lng: selected.latitude.lng\n        },\n        onCloseClick: () => {\n          setSelected(null);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(StyledInfoRating, {\n            children: [\"\\uD83D\\uDCCD\", selected.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/cYWf8KJl4WpF8k67bG235PzDXM=\", false, function () {\n  return [useLoadScript, useParams];\n});\n\n_c2 = App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledInfoRating\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/victorchen/Desktop/react-test/my-app/src/components/MapProductDetail.js"],"names":["React","useCallback","useRef","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","tent","styled","firebase","useParams","StyledInfoRating","h3","libraries","mapContainerStyle","height","width","App","isLoaded","loadError","googleMapsApiKey","selected","setSelected","places","setPlaces","itemID","firestore","collection","where","onSnapshot","collectionSnapshot","data","docs","map","docSnapshot","id","console","log","lat","lng","marker","latitude","url","origin","window","google","maps","Point","anchor","scaledSize","Size","placeId","address"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useState, useEffect } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport tent from \"../imge/camping-tent.png\";\nimport styled from \"styled-components\";\nimport firebase from \"firebase\";\nimport { useParams } from \"react-router\";\n\nconst StyledInfoRating = styled.h3`\n  color: gray;\n  font-family: sans-serif;\n  font-weight: bold;\n  text-align: center;\n`;\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"50vmin\",\n  width: \"100%\",\n};\n\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAAuyNVSxdv2VTjUe_N7hyH8drXIoypa_E\",\n    libraries,\n  });\n\n  const [selected, setSelected] = useState(null);\n  const [places, setPlaces] = useState([]);\n  const { itemID } = useParams();\n\n  React.useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"product\")\n      .where(\"__name__\", \"==\", itemID)\n      .onSnapshot((collectionSnapshot) => {\n        const data = collectionSnapshot.docs.map((docSnapshot) => {\n          const id = docSnapshot.id;\n          return { ...docSnapshot.data(), id };\n        });\n        setPlaces(data);\n        console.log(data);\n      });\n  }, []);\n\n  if (loadError) return \"Error\";\n  if (!isLoaded) return \"Loading...\";\n\n  //   console.log(nearby);\n  //   console.log(selected);\n\n  return (\n    <div>\n      <GoogleMap\n        id=\"map\"\n        mapContainerStyle={mapContainerStyle}\n        zoom={8}\n        center={{\n          lat: 23.96363430162278,\n          lng: 120.97561230851146,\n        }}\n        clickableIcons={false}\n        // onLoad={onMapLoad}\n      >\n        {/* <Marker\n          position={currentLocation}\n          draggable={true}\n          onDragEnd={(coords) => dragMarker(coords)}\n        /> */}\n        {places.map((marker) => (\n          <Marker\n            key={marker.placeId}\n            position={{\n              lat: marker.latitude.lat,\n              lng: marker.latitude.lng,\n            }}\n            onClick={() => {\n              setSelected(marker);\n            }}\n            icon={{\n              url: tent,\n              origin: new window.google.maps.Point(0, 0),\n              anchor: new window.google.maps.Point(20, 20),\n              scaledSize: new window.google.maps.Size(40, 40),\n            }}\n          />\n        ))}\n\n        {selected ? (\n          <InfoWindow\n            position={{\n              lat: selected.latitude.lat,\n              lng: selected.latitude.lng,\n            }}\n            onCloseClick={() => {\n              setSelected(null);\n            }}\n          >\n            <div>\n              <StyledInfoRating>📍{selected.address}</StyledInfoRating>\n            </div>\n          </InfoWindow>\n        ) : null}\n      </GoogleMap>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}