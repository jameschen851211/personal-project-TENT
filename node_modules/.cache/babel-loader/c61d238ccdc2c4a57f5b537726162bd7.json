{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useCallback, useRef, useState, useEffect } from \"react\";\nimport { GoogleMap, useLoadScript, Marker, InfoWindow } from \"@react-google-maps/api\";\nimport tent from \"../imge/camping-tent.png\";\nimport styled from \"styled-components\";\nimport firebase from \"firebase\";\nimport { useParams } from \"react-router\";\nconst StyledInfoHeader = styled.h2`\n  color: black;\n  font-family: sans-serif;\n  font-weight: bold;\n  text-align: center;\n  font-size: 15px;\n`;\nconst StyledInfoRating = styled.h3`\n  color: gray;\n  font-family: sans-serif;\n  font-weight: bold;\n  text-align: center;\n`;\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"50vmin\",\n  width: \"100%\"\n};\nexport default function App() {\n  _s();\n\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAAuyNVSxdv2VTjUe_N7hyH8drXIoypa_E\",\n    libraries\n  });\n  const [selected, setSelected] = useState(null);\n  const [places, setPlaces] = useState([]);\n  const {\n    itemID\n  } = useParams();\n  React.useEffect(() => {\n    firebase.firestore().collection(\"product\").doc(itemID).onSnapshot(docSnapshot => {\n      const data = docSnapshot.data();\n      setPlaces(data);\n      console.log(data);\n    });\n  }, []);\n} //   if (loadError) return \"Error\";\n//   if (!isLoaded) return \"Loading...\";\n//   //   console.log(nearby);\n//   //   console.log(selected);\n//   return (\n//     <div>\n//       <GoogleMap\n//         id=\"map\"\n//         mapContainerStyle={mapContainerStyle}\n//         zoom={8}\n//         center={{\n//           lat: 23.96363430162278,\n//           lng: 120.97561230851146,\n//         }}\n//         clickableIcons={false}\n//         // onLoad={onMapLoad}\n//       >\n//         {/* <Marker\n//           position={currentLocation}\n//           draggable={true}\n//           onDragEnd={(coords) => dragMarker(coords)}\n//         /> */}\n//         {places.map((marker) => (\n//           <Marker\n//             key={marker.placeId}\n//             position={{\n//               lat: marker.latitude.lat,\n//               lng: marker.latitude.lng,\n//             }}\n//             onClick={() => {\n//               setSelected(marker);\n//             }}\n//             icon={{\n//               url: tent,\n//               origin: new window.google.maps.Point(0, 0),\n//               anchor: new window.google.maps.Point(20, 20),\n//               scaledSize: new window.google.maps.Size(40, 40),\n//             }}\n//           />\n//         ))}\n//         {selected ? (\n//           <InfoWindow\n//             position={{\n//               lat: selected.latitude.lat,\n//               lng: selected.latitude.lng,\n//             }}\n//             onCloseClick={() => {\n//               setSelected(null);\n//             }}\n//           >\n//             <div>\n//               <StyledInfoRating>üìç{selected.address}</StyledInfoRating>\n//             </div>\n//           </InfoWindow>\n//         ) : null}\n//       </GoogleMap>\n//     </div>\n//   );\n// }\n\n_s(App, \"/cYWf8KJl4WpF8k67bG235PzDXM=\", false, function () {\n  return [useLoadScript, useParams];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/victorchen/Desktop/react-test/my-app/src/components/MapProductDetail.js"],"names":["React","useCallback","useRef","useState","useEffect","GoogleMap","useLoadScript","Marker","InfoWindow","tent","styled","firebase","useParams","StyledInfoHeader","h2","StyledInfoRating","h3","libraries","mapContainerStyle","height","width","App","isLoaded","loadError","googleMapsApiKey","selected","setSelected","places","setPlaces","itemID","firestore","collection","doc","onSnapshot","docSnapshot","data","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,EAAqCC,QAArC,EAA+CC,SAA/C,QAAgE,OAAhE;AACA,SACEC,SADF,EAEEC,aAFF,EAGEC,MAHF,EAIEC,UAJF,QAKO,wBALP;AAMA,OAAOC,IAAP,MAAiB,0BAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,MAAMC,gBAAgB,GAAGH,MAAM,CAACI,EAAG;AACnC;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,MAAMC,gBAAgB,GAAGL,MAAM,CAACM,EAAG;AACnC;AACA;AACA;AACA;AACA,CALA;AAOA,MAAMC,SAAS,GAAG,CAAC,QAAD,CAAlB;AACA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,MAAM,EAAE,QADgB;AAExBC,EAAAA,KAAK,EAAE;AAFiB,CAA1B;AAKA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BjB,aAAa,CAAC;AAC5CkB,IAAAA,gBAAgB,EAAE,yCAD0B;AAE5CP,IAAAA;AAF4C,GAAD,CAA7C;AAKA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACwB,MAAD,EAASC,SAAT,IAAsBzB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAE0B,IAAAA;AAAF,MAAajB,SAAS,EAA5B;AAEAZ,EAAAA,KAAK,CAACI,SAAN,CAAgB,MAAM;AACpBO,IAAAA,QAAQ,CACLmB,SADH,GAEGC,UAFH,CAEc,SAFd,EAGGC,GAHH,CAGOH,MAHP,EAIGI,UAJH,CAIeC,WAAD,IAAiB;AAC3B,YAAMC,IAAI,GAAGD,WAAW,CAACC,IAAZ,EAAb;AACAP,MAAAA,SAAS,CAACO,IAAD,CAAT;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD,KARH;AASD,GAVD,EAUG,EAVH;AAWD,C,CAED;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GApFwBd,G;UACUf,a,EAObM,S;;;KARGS,G","sourcesContent":["import React, { useCallback, useRef, useState, useEffect } from \"react\";\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\nimport tent from \"../imge/camping-tent.png\";\nimport styled from \"styled-components\";\nimport firebase from \"firebase\";\nimport { useParams } from \"react-router\";\n\nconst StyledInfoHeader = styled.h2`\n  color: black;\n  font-family: sans-serif;\n  font-weight: bold;\n  text-align: center;\n  font-size: 15px;\n`;\n\nconst StyledInfoRating = styled.h3`\n  color: gray;\n  font-family: sans-serif;\n  font-weight: bold;\n  text-align: center;\n`;\n\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  height: \"50vmin\",\n  width: \"100%\",\n};\n\nexport default function App() {\n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: \"AIzaSyAAuyNVSxdv2VTjUe_N7hyH8drXIoypa_E\",\n    libraries,\n  });\n\n  const [selected, setSelected] = useState(null);\n  const [places, setPlaces] = useState([]);\n  const { itemID } = useParams();\n\n  React.useEffect(() => {\n    firebase\n      .firestore()\n      .collection(\"product\")\n      .doc(itemID)\n      .onSnapshot((docSnapshot) => {\n        const data = docSnapshot.data();\n        setPlaces(data);\n        console.log(data);\n      });\n  }, []);\n}\n\n//   if (loadError) return \"Error\";\n//   if (!isLoaded) return \"Loading...\";\n\n//   //   console.log(nearby);\n//   //   console.log(selected);\n\n//   return (\n//     <div>\n//       <GoogleMap\n//         id=\"map\"\n//         mapContainerStyle={mapContainerStyle}\n//         zoom={8}\n//         center={{\n//           lat: 23.96363430162278,\n//           lng: 120.97561230851146,\n//         }}\n//         clickableIcons={false}\n//         // onLoad={onMapLoad}\n//       >\n//         {/* <Marker\n//           position={currentLocation}\n//           draggable={true}\n//           onDragEnd={(coords) => dragMarker(coords)}\n//         /> */}\n//         {places.map((marker) => (\n//           <Marker\n//             key={marker.placeId}\n//             position={{\n//               lat: marker.latitude.lat,\n//               lng: marker.latitude.lng,\n//             }}\n//             onClick={() => {\n//               setSelected(marker);\n//             }}\n//             icon={{\n//               url: tent,\n//               origin: new window.google.maps.Point(0, 0),\n//               anchor: new window.google.maps.Point(20, 20),\n//               scaledSize: new window.google.maps.Size(40, 40),\n//             }}\n//           />\n//         ))}\n\n//         {selected ? (\n//           <InfoWindow\n//             position={{\n//               lat: selected.latitude.lat,\n//               lng: selected.latitude.lng,\n//             }}\n//             onCloseClick={() => {\n//               setSelected(null);\n//             }}\n//           >\n//             <div>\n//               <StyledInfoRating>üìç{selected.address}</StyledInfoRating>\n//             </div>\n//           </InfoWindow>\n//         ) : null}\n//       </GoogleMap>\n//     </div>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}