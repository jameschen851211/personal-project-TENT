{"ast":null,"code":"var _jsxFileName = \"/Users/victorchen/Desktop/react-test/my-app/src/components/MapAutocamplete.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst InputArea = styled.div`\n  width: 30%;\n  margin: 15px 0px;\n`;\n_c = InputArea;\nconst Input = styled.input`\n  border-radius: 5px;\n  width: 330%;\n  height: 4vmin;\n  padding-left: 10px;\n  padding-top: 0.5vmin;\n  font-size: 2vmin;\n  @media screen and (max-width: 800px) {\n    font-size: 1.5vmin;\n  }\n`;\n_c2 = Input;\n\nfunction MapAutocomplete(props) {\n  _s();\n\n  const [address, setAddress] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleSelect = async pickValue => {\n    const results = await geocodeByAddress(pickValue);\n    const latLng = await getLatLng(results[0]);\n    const placeId = results[0].place_id;\n    setAddress(pickValue);\n    setCoordinates(latLng); // 把座標位置和地址、placeId傳回去給父層\n\n    const data = [pickValue, placeId, latLng];\n    props.placeaddress(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(InputArea, {\n    children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: address,\n      onChange: setAddress,\n      onSelect: handleSelect,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Input, { ...getInputProps({\n            placeholder: \"Type address\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"...loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 26\n          }, this) : null, suggestions.map(suggestion => {\n            const style = {\n              backgroundColor: suggestion.active ? \"#16A085\" : \"#fff\"\n            };\n            return /*#__PURE__*/_createElement(\"div\", { ...getSuggestionItemProps(suggestion, {\n                style\n              }),\n              key: suggestion.placeId,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 19\n              }\n            }, suggestion.description);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MapAutocomplete, \"cqKfw51EcxQgrASxkXPHieqg6wM=\");\n\n_c3 = MapAutocomplete;\nexport default MapAutocomplete;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"InputArea\");\n$RefreshReg$(_c2, \"Input\");\n$RefreshReg$(_c3, \"MapAutocomplete\");","map":{"version":3,"sources":["/Users/victorchen/Desktop/react-test/my-app/src/components/MapAutocamplete.js"],"names":["React","styled","PlacesAutocomplete","geocodeByAddress","getLatLng","InputArea","div","Input","input","MapAutocomplete","props","address","setAddress","useState","coordinates","setCoordinates","lat","lng","handleSelect","pickValue","results","latLng","placeId","place_id","data","placeaddress","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","backgroundColor","active","description"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;;;AAKA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAI;AAC7B;AACA;AACA,CAHA;KAAMD,S;AAKN,MAAME,KAAK,GAAGN,MAAM,CAACO,KAAM;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;MAAMD,K;;AAYN,SAASE,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC9B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,KAAK,CAACa,QAAN,CAAe,EAAf,CAA9B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCf,KAAK,CAACa,QAAN,CAAe;AACnDG,IAAAA,GAAG,EAAE,IAD8C;AAEnDC,IAAAA,GAAG,EAAE;AAF8C,GAAf,CAAtC;;AAKA,QAAMC,YAAY,GAAG,MAAOC,SAAP,IAAqB;AACxC,UAAMC,OAAO,GAAG,MAAMjB,gBAAgB,CAACgB,SAAD,CAAtC;AACA,UAAME,MAAM,GAAG,MAAMjB,SAAS,CAACgB,OAAO,CAAC,CAAD,CAAR,CAA9B;AACA,UAAME,OAAO,GAAGF,OAAO,CAAC,CAAD,CAAP,CAAWG,QAA3B;AACAX,IAAAA,UAAU,CAACO,SAAD,CAAV;AACAJ,IAAAA,cAAc,CAACM,MAAD,CAAd,CALwC,CAOxC;;AACA,UAAMG,IAAI,GAAG,CAACL,SAAD,EAAYG,OAAZ,EAAqBD,MAArB,CAAb;AACAX,IAAAA,KAAK,CAACe,YAAN,CAAmBD,IAAnB;AACD,GAVD;;AAYA,sBACE,QAAC,SAAD;AAAA,2BACE,QAAC,kBAAD;AACE,MAAA,KAAK,EAAEb,OADT;AAEE,MAAA,QAAQ,EAAEC,UAFZ;AAGE,MAAA,QAAQ,EAAEM,YAHZ;AAAA,gBAKG,CAAC;AAAEQ,QAAAA,aAAF;AAAiBC,QAAAA,WAAjB;AAA8BC,QAAAA,sBAA9B;AAAsDC,QAAAA;AAAtD,OAAD,kBACC;AAAA,gCAIE,QAAC,KAAD,OAAWH,aAAa,CAAC;AAAEI,YAAAA,WAAW,EAAE;AAAf,WAAD;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE;AAAA,qBACGD,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,GAA2B,IADrC,EAEGF,WAAW,CAACI,GAAZ,CAAiBC,UAAD,IAAgB;AAC/B,kBAAMC,KAAK,GAAG;AACZC,cAAAA,eAAe,EAAEF,UAAU,CAACG,MAAX,GAAoB,SAApB,GAAgC;AADrC,aAAd;AAIA,gCACE,2BACMP,sBAAsB,CAACI,UAAD,EAAa;AAAEC,gBAAAA;AAAF,eAAb,CAD5B;AAEE,cAAA,GAAG,EAAED,UAAU,CAACV,OAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAIGU,UAAU,CAACI,WAJd,CADF;AAQD,WAbA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD;;GAtDQ3B,e;;MAAAA,e;AAwDT,eAAeA,eAAf","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\n\nconst InputArea = styled.div`\n  width: 30%;\n  margin: 15px 0px;\n`;\n\nconst Input = styled.input`\n  border-radius: 5px;\n  width: 330%;\n  height: 4vmin;\n  padding-left: 10px;\n  padding-top: 0.5vmin;\n  font-size: 2vmin;\n  @media screen and (max-width: 800px) {\n    font-size: 1.5vmin;\n  }\n`;\n\nfunction MapAutocomplete(props) {\n  const [address, setAddress] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null,\n  });\n\n  const handleSelect = async (pickValue) => {\n    const results = await geocodeByAddress(pickValue);\n    const latLng = await getLatLng(results[0]);\n    const placeId = results[0].place_id;\n    setAddress(pickValue);\n    setCoordinates(latLng);\n\n    // 把座標位置和地址、placeId傳回去給父層\n    const data = [pickValue, placeId, latLng];\n    props.placeaddress(data);\n  };\n\n  return (\n    <InputArea>\n      <PlacesAutocomplete\n        value={address}\n        onChange={setAddress}\n        onSelect={handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            {/* <p>Latitude：{coordinates.lat}</p> */}\n            {/* <p>Longitude：{coordinates.lng}</p> */}\n\n            <Input {...getInputProps({ placeholder: \"Type address\" })} />\n            <div>\n              {loading ? <div>...loading</div> : null}\n              {suggestions.map((suggestion) => {\n                const style = {\n                  backgroundColor: suggestion.active ? \"#16A085\" : \"#fff\",\n                };\n\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, { style })}\n                    key={suggestion.placeId}\n                  >\n                    {suggestion.description}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    </InputArea>\n  );\n}\n\nexport default MapAutocomplete;\n"]},"metadata":{},"sourceType":"module"}